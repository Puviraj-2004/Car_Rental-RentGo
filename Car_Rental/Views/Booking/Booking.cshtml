@using Car_Rental.Models.Entities
@using Car_Rental.Enum
@model Car_Rental.Models.Entities.Booking

@{
    var car = ViewBag.SelectedCar as Car;
    ViewData["Title"] = "Complete Your Booking";
}

@section Styles {
    <style>
        .booking-card {
            background-color: #fff;
            border-radius: 1rem;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }

            .booking-card .card-header {
                background-color: #343a40;
                color: white;
                padding: 1rem 1.5rem;
                border-bottom: 5px solid #ffc107;
            }

            .booking-card .list-group-item {
                border-bottom: 1px solid #f0f0f0 !important;
                padding: 0.85rem 1.5rem;
            }

                .booking-card .list-group-item .bi {
                    color: #0d6efd;
                    margin-right: 1rem;
                    width: 20px;
                }

        .star-rating .bi-star-fill {
            color: #ffc107;
        }

        .price-display {
            font-weight: 700;
            font-size: 1.75rem;
        }

        #insuranceDescription {
            display: none;
            background-color: #e9f5ff;
            border-left: 5px solid #0d6efd;
            padding: 0.75rem 1rem;
            margin-top: 0.5rem;
            border-radius: 0.25rem;
        }

        .form-section-heading {
            font-weight: 600;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #ffc107;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }
        /* -- CSS FOR "CHANGE CAR" MODAL CARD UI -- */
        .modal-car-card .card-img-container {
            width: 100%;
            aspect-ratio: 16 / 10;
            overflow: hidden;
        }

        .modal-car-card .card-img-top {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    </style>
}

@if (car == null)
{
    <div class="alert alert-danger text-center mt-5">
        <h1 class="display-4"><i class="bi bi-exclamation-triangle-fill"></i> Error: Car Not Found</h1>
        <p class="lead">The car you are trying to book is not available. Please select another car.</p>
        <a asp-controller="Guest" asp-action="Cars" class="btn btn-primary btn-lg mt-3">Back to Car List</a>
    </div>
}
else
{
    <div class="container my-5">
        <div class="text-center mb-4">
            <h1 class="fw-bold">@ViewData["Title"]</h1>
            <p class="text-muted">You're just a few steps away from hitting the road.</p>
        </div>

        <div class="row g-4 g-lg-5">
            <!-- CAR DETAILS COLUMN -->
            <div class="col-lg-5">
                <div class="booking-card sticky-top" style="top: 20px;">
                    <div class="card-header"><h4 class="mb-0">Your Selected Ride</h4></div>
                    <img src="@(string.IsNullOrEmpty(car.ImageUrl) ? "/images/default-car.png" : car.ImageUrl)" class="card-img-top">
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3 class="card-title fw-bolder mb-0">@car.Brand @car.Model</h3>
                            @if (car.Rating.HasValue)
                            {
                                <div class="star-rating">
                                    @for (int i = 0; i < car.Rating.Value; i++)
                                    {
                                        <i class="bi bi-star-fill"></i>
                                    }
                                    @for (int i = car.Rating.Value; i < 5; i++)
                                    {
                                        <i class="bi bi-star"></i>
                                    }
                                </div>
                            }
                        </div>
                        <h6 class="card-subtitle mb-3 text-muted">@car.Year Model</h6>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex justify-content-between"><span><i class="bi bi-tag-fill"></i>Price / day</span><strong id="pricePerDay" data-base-price="@car.RentalPricePerDay.ToString("F2")">$@car.RentalPricePerDay.ToString("F2")</strong></li>
                        <li class="list-group-item d-flex justify-content-between"><span><i class="bi bi-gear-fill"></i>Transmission</span><strong>@car.Transmission</strong></li>
                        <li class="list-group-item d-flex justify-content-between"><span><i class="bi bi-fuel-pump-fill"></i>Fuel</span><strong>@car.FuelType</strong></li>
                        <li class="list-group-item d-flex justify-content-between"><span><i class="bi bi-people-fill"></i>Seats</span><strong>@car.NumberOfSeats</strong></li>
                        <li class="list-group-item d-flex justify-content-between"><span><i class="bi bi-snow"></i>Air Conditioned</span><strong>@(car.IsAirConditioned ? "Yes" : "No")</strong></li>
                        <li class="list-group-item d-flex justify-content-between"><span><i class="bi bi-speedometer2"></i>Mileage</span><strong>@car.Mileage km/l</strong></li>
                    </ul>
                    <div class="card-body">
                        <button type="button" class="btn btn-outline-secondary w-100" data-bs-toggle="modal" data-bs-target="#changeCarModal"><i class="bi bi-arrow-left-right"></i> Change Car</button>
                    </div>
                </div>
            </div>

            <!-- BOOKING FORM COLUMN -->
            <div class="col-lg-7">
                <form asp-controller="Booking" asp-action="ProceedToAuthentication" method="post" class="p-4 bg-white border rounded">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="CarID" id="CarID" value="@car.CarId" />
                    <input type="hidden" asp-for="TotalPrice" id="totalPriceInput" />

                    <h5 class="form-section-heading">Rental Dates</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3"><label asp-for="PickupDate" class="form-label fw-bold"></label><input asp-for="PickupDate" class="form-control" id="pickupDate" type="date" /></div>
                        <div class="col-md-6 mb-3"><label asp-for="ReturnDate" class="form-label fw-bold"></label><input asp-for="ReturnDate" class="form-control" id="returnDate" type="date" /></div>
                    </div>
                    <div id="availability-message" class="alert d-none"></div>

                    <h5 class="form-section-heading">Optional Add-ons</h5>
                    <div class="mb-3">
                        <label asp-for="InsuranceID" class="form-label">Insurance</label>
                        <select asp-for="InsuranceID" class="form-select" id="insuranceSelect">
                            <option value="">None</option>
                            @foreach (var insurance in (List<Insurance>)ViewBag.Insurances)
                            {
                                <option value="@insurance.InsuranceID" data-percentage="@insurance.CoveragePercentage" data-description="@insurance.Description">@insurance.Name (+@insurance.CoveragePercentage%)</option>
                            }
                        </select>
                        <div id="insuranceDescription" class="small"></div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="DriverID" class="form-label">Driver</label>
                        <select asp-for="DriverID" class="form-select" id="driverSelect">
                            <option value="">I will drive myself</option>
                            @foreach (var driver in (List<Driver>)ViewBag.Drivers)
                            {
                                <option value="@driver.DriverID" data-fee-per-day="@driver.FeePerDay?.ToString("F2")">@driver.FullName (+ $@driver.FeePerDay?.ToString("F2") per day)</option>
                            }
                        </select>
                    </div>

                    <h5 class="form-section-heading">License Details</h5>
                    <div class="row">
                        <div class="col-md-6 mb-3"><label asp-for="DriverLicenseNumber" class="form-label"></label><input asp-for="DriverLicenseNumber" class="form-control" required /></div>
                        <div class="col-md-6 mb-3"><label asp-for="NIC" class="form-label"></label><input asp-for="NIC" class="form-control" required /></div>
                        <div class="col-md-6 mb-3"><label asp-for="LicenseExpiryDate" class="form-label"></label><input asp-for="LicenseExpiryDate" type="date" class="form-control" id="licenseExpiryDate" required /><div class="text-danger small mt-1" id="license-expiry-error" style="display:none;">License must be valid after the return date.</div></div>
                    </div>

                    <div class="alert alert-success mt-4">
                        <h5 class="alert-heading">Total Price</h5>
                        <div class="price-display" id="totalPriceDisplay">$0.00</div>
                        <div id="priceBreakdown" class="small mt-2 border-top pt-2"></div>
                    </div>
                    <button type="submit" id="confirmBookingBtn" class="btn btn-warning btn-lg w-100 fw-bold"><i class="bi bi-arrow-right-circle-fill"></i> Continue</button>
                </form>
            </div>
        </div>
    </div>
}

<!-- "CHANGE CAR" MODAL -->
<div class="modal fade" id="changeCarModal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header"><h5 class="modal-title">Select a Different Car</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
            <div class="modal-body" id="availableCarsContent"></div>
        </div>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            // Safety check to ensure script only runs on the booking page
            if ($('#CarID').length > 0) {

                // --- ELEMENT SELECTORS (for clean, efficient code) ---
                const mainBookingForm = $('#mainBookingForm');
                const continueBtn = $('#continueBtn');
                const guestDetailsModalEl = new bootstrap.Modal(document.getElementById('guestDetailsModal'));
                const finalizeGuestBookingBtn = $('#finalizeGuestBookingBtn');
                const changeCarModalEl = new bootstrap.Modal(document.getElementById('changeCarModal'));
                const isUserAuthenticated = @User.Identity.IsAuthenticated.ToString().ToLower();

                // Form element selectors
                const carIdEl = $('#CarID');
                const pickupDateEl = $('#pickupDate');
                const returnDateEl = $('#returnDate');
                const licenseExpiryDateEl = $('#licenseExpiryDate');
                const availabilityMessageEl = $('#availability-message');
                const insuranceSelectEl = $('#insuranceSelect');
                const driverSelectEl = $('#driverSelect');

                // ==========================================================
                //    MASTER "CONTINUE" BUTTON LOGIC
                // ==========================================================
                continueBtn.on('click', async function() {
                    // Disable the button temporarily to prevent multiple clicks
                    continueBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm"></span> Checking...');

                    // 1. Check browser's built-in validation (e.g., required fields)
                    if (!mainBookingForm[0].checkValidity()) {
                        mainBookingForm[0].reportValidity();
                        continueBtn.prop('disabled', false).html('<i class="bi bi-arrow-right-circle-fill"></i> Continue');
                        return;
                    }

                    // 2. Perform our custom live checks
                    const isLicenseValid = validateLicenseExpiry();
                    const isAvailable = await checkCarAvailability();

                    // 3. If any custom check fails, stop and re-enable the button.
                    // The error messages will already be visible.
                    if (!isLicenseValid || !isAvailable) {
                        continueBtn.prop('disabled', false).html('<i class="bi bi-arrow-right-circle-fill"></i> Continue');
                        return;
                    }

                    // --- If all checks pass, proceed to the next step ---
                    if (isUserAuthenticated) {
                        mainBookingForm.submit();
                    } else {
                        guestDetailsModalEl.show();
                        // Re-enable the button after opening the modal
                        continueBtn.prop('disabled', false).html('<i class="bi bi-arrow-right-circle-fill"></i> Continue');
                    }
                });

                // --- GUEST MODAL "PROCEED" BUTTON LOGIC ---
                finalizeGuestBookingBtn.on('click', async function() {
                    const guestForm = $('#guestDetailsForm');
                    if (!guestForm[0].checkValidity()) {
                        guestForm[0].reportValidity();
                        return;
                    }
                    // Your existing, correct logic for packaging and sending guest data...
                });

                // --- VALIDATION HELPER 1: Car Availability (returns true/false) ---
                async function checkCarAvailability() {
                    const pickupDate = pickupDateEl.val();
                    const returnDate = returnDateEl.val();
                    if (!pickupDate || !returnDate || new Date(returnDate) <= new Date(pickupDate)) {
                        availabilityMessageEl.addClass('d-none');
                        return true;
                    }
                    try {
                        const response = await fetch(`/Car/CheckAvailability?carId=${carIdEl.val()}&pickupDate=${pickupDate}&returnDate=${returnDate}`);
                        const data = await response.json();
                        if (data.isAvailable) {
                            availabilityMessageEl.addClass('d-none');
                            return true;
                        } else {
                            availabilityMessageEl.removeClass('d-none').addClass('alert-danger').html('<strong>Not Available!</strong> This car is booked for these dates.');
                            return false;
                        }
                    } catch (error) {
                        availabilityMessageEl.removeClass('d-none').addClass('alert-danger').text('Error checking availability.');
                        return false;
                    }
                }

                // --- VALIDATION HELPER 2: License Expiry (returns true/false) ---
                function validateLicenseExpiry() {
                    const errorDiv = $('#license-expiry-error');
                    if (returnDateEl.val() && licenseExpiryDateEl.val()) {
                        if (new Date(licenseExpiryDateEl.val()) <= new Date(returnDateEl.val())) {
                            errorDiv.slideDown();
                            return false;
                        }
                    }
                    errorDiv.slideUp();
                    return true;
                }

                // --- FEATURE: "CHANGE CAR" MODAL LOGIC ---
                const changeCarModalElement = document.getElementById('changeCarModal');
                if (changeCarModalElement) {
                    changeCarModalElement.addEventListener('show.bs.modal', async () => {
                        // ... (Your existing, correct logic for the change car modal)
                    });
                }
                $(document).on('click', '.select-car-btn', function() {
                    // ... (Your existing, correct logic for selecting a car from the modal)
                });

                // --- UI & PRICE FUNCTIONS ---
                function initializeDatePickers() {
                    const today = new Date().toISOString().split('T')[0];
                    pickupDateEl.attr('min', today);
                    pickupDateEl.on('change', () => {
                        const pickupValue = pickupDateEl.val();
                        if (pickupValue) {
                            let minReturnDate = new Date(pickupValue);
                            minReturnDate.setDate(minReturnDate.getDate() + 1);
                            returnDateEl.attr('min', minReturnDate.toISOString().split('T')[0]);
                            if (returnDateEl.val() && returnDateEl.val() <= pickupValue) returnDateEl.val('');
                        }
                    });
                }

                function updateInsuranceDetails() {
                    const selected = insuranceSelectEl.find('option:selected');
                    const container = $('#insuranceDescription');
                    if (selected.val()) { container.text(selected.data('description')).slideDown(); } else { container.slideUp(); }
                }

                function calculateTotalPrice() {
                    const basePricePerDay = parseFloat($('#pricePerDay').data('base-price'));
                    const pickupDate = new Date(pickupDateEl.val());
                    const returnDate = new Date(returnDateEl.val());
                    let numberOfDays = 1;
                    if (returnDate > pickupDate) { numberOfDays = Math.ceil((returnDate - pickupDate) / (1000 * 60 * 60 * 24)); }
                    let rentalTotal = numberOfDays * basePricePerDay;
                    let insuranceCost = 0;
                    if (insuranceSelectEl.val()) { insuranceCost = rentalTotal * (parseFloat(insuranceSelectEl.find('option:selected').data('percentage')) / 100); }
                    let driverFee = 0;
                    if (driverSelectEl.val()) { driverFee = numberOfDays * parseFloat(driverSelectEl.find('option:selected').data('fee-per-day')); }
                    let finalTotal = rentalTotal + insuranceCost + driverFee;
                    $('#totalPriceDisplay').text('$' + finalTotal.toFixed(2));
                    $('#totalPriceInput').val(finalTotal.toFixed(2));
                    let breakdownHtml = `<p class="mb-0">Rental (${numberOfDays} days): $${rentalTotal.toFixed(2)}</p>`;
                    if (insuranceCost > 0) breakdownHtml += `<p class="mb-0">Insurance: + $${insuranceCost.toFixed(2)}</p>`;
                    if (driverFee > 0) breakdownHtml += `<p class="mb-0">Driver Fee: + $${driverFee.toFixed(2)}</p>`;
                    $('#priceBreakdown').html(breakdownHtml);
                }

                // --- EVENT LISTENERS ---
                pickupDateEl.on('change', calculateTotalPrice);
                returnDateEl.on('change', calculateTotalPrice);
                insuranceSelectEl.on('change', () => { updateInsuranceDetails(); calculateTotalPrice(); });
                driverSelectEl.on('change', calculateTotalPrice);

                // --- INITIAL CALLS ON PAGE LOAD ---
                initializeDatePickers();
                calculateTotalPrice();
                updateInsuranceDetails();
            }
        });
    </script>
}